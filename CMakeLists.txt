cmake_minimum_required(VERSION 3.15.3)
set(CMAKE_BUILD_TYPE ${BUILD_TYPE})
set(CMAKE_BUILD_TYPE Debug CACHE STRING "Options are: Debug or Release (case sensitive)")

set(EXE mabe)
project(${EXE})

# OS-specific alterations
if (MSYS OR MINGW)
  # msys2 environment struggles with compiler detection
  message(STATUS "detected platform: msys/mingw on windows")
  set(CMAKE_C_COMPILER gcc)
  set(CMAKE_CXX_COMPILER g++)
endif()
if (MSVC OR WIN32)
  message(STATUS "detected platform: visual studio on windows")
endif()
if (UNIX AND NOT APPLE)
  message(STATUS "detected platform: linux")
endif()
if (APPLE)
  message(STATUS "detected platform: apple")
endif()

# read buildOptions
# produce modules.h, cmake_auto_injection.txt
#message(STATUS "building modules.h...")
#find_package(Python3 COMPONENTS Interpreter)
#if (NOT Python3_FOUND)
#  message(FATAL_ERROR " Python3 required for pythonTools/mbuild.py functionality")
#endif()
#execute_process(
#  COMMAND ${Python3_EXECUTABLE} pythonTools/mbuild.py -nc
#  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
#  OUTPUT_QUIET
#  )

add_executable(${EXE} main.cpp)

## set standard to c++17
set(CMAKE_CXX_STANDARD 17)
target_compile_features(${EXE} PRIVATE cxx_std_17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

## Useful directory-crawling macro
## example:
## SUBDIRLIST(SUBDIRS ${CMAKE_CURRENT_LIST_DIR})
## FOREACH(subdir ${SUBDIRS})
##   ADD_SUBDIRECTORY(${subdir})
## ENDFOREACH()
MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

set(list_archivists Default)
set(list_brains)
set(list_genomes)
set(list_optimizers Simple)
set(list_worlds)

function(register_module module_group module_name)
  set(fn_name)
  if("${module_group}" STREQUAL "Archivist")
    set(fn_name list_archivists)
  elseif("${module_group}" STREQUAL "Brain")
    set(fn_name list_brains)
  elseif("${module_group}" STREQUAL "Genome")
    set(fn_name list_genomes)
  elseif("${module_group}" STREQUAL "Optimizer")
    set(fn_name list_optimizers)
  elseif("${module_group}" STREQUAL "World")
    set(fn_name list_worlds)
  endif()
  set(${fn_name} ${${fn_name}} ${module_name} PARENT_SCOPE)
endfunction()

function(write_modules_h)
  set(f modules.h)
  file(WRITE ${f} "//  MABE is a product of The Hintze Lab @ MSU\n")
  file(APPEND ${f} "//     for general research information:\n")
  file(APPEND ${f} "//         http://hintzelab.msu.edu/\n")
  file(APPEND ${f} "//     for MABE documentation:\n")
  file(APPEND ${f} "//         github.com/Hintzelab/MABE/wiki\n")
  file(APPEND ${f} "//\n")
  file(APPEND ${f} "//  Copyright (c) 2019 Michigan State University. All rights reserved.\n")
  file(APPEND ${f} "//     to view the full license, visit:\n")
  file(APPEND ${f} "//          github.com/Hintzelab/MABE/wiki\n")
  file(APPEND ${f} "\n")
  file(APPEND ${f} "//  This file was auto-generated from cmake\n")
  file(APPEND ${f} "\n")
  file(APPEND ${f} "#ifndef __AutoBuild__Modules__\n")
  file(APPEND ${f} "#define __AutoBuild__Modules__\n")
  foreach(module_name ${list_archivists})
    if(${module_name} MATCHES "Default")
      file(APPEND ${f} "#include <Archivist/${module_name}Archivist.h>\n")
    else()
      file(APPEND ${f} "#include <Archivist/${module_name}Archivist/${module_name}Archivist.h>\n")
    endif()
  endforeach()
  foreach(module_name ${list_brains})
    file(APPEND ${f} "#include <Brain/${module_name}Brain/${module_name}Brain.h>\n")
  endforeach()
  foreach(module_name ${list_genomes})
    file(APPEND ${f} "#include <Genome/${module_name}Genome/${module_name}Genome.h>\n")
  endforeach()
  foreach(module_name ${list_optimizers})
    file(APPEND ${f} "#include <Optimizer/${module_name}Optimizer/${module_name}Optimizer.h>\n")
  endforeach()
  foreach(module_name ${list_worlds})
    file(APPEND ${f} "#include <World/${module_name}World/${module_name}World.h>\n")
  endforeach()

  # write archivist factory
  file(APPEND ${f} "\n")
  file(APPEND ${f} "//create an archivist\n")
  file(APPEND ${f} "std::shared_ptr<DefaultArchivist> makeArchivist(std::vector<std::string> popFileColumns, std::shared_ptr<Abstract_MTree> _maxFormula, std::shared_ptr<ParametersTable> PT, std::string groupPrefix = \"\"){\n")
  file(APPEND ${f} "  std::shared_ptr<DefaultArchivist> newArchivist;\n")
  file(APPEND ${f} "  bool found = false;\n")
  file(APPEND ${f} "  std::string archivistType = DefaultArchivist::Arch_outputMethodStrPL->get(PT);\n")
  foreach(module_name ${list_archivists})
    file(APPEND ${f} "  if (archivistType == \"${module_name}\") {\n")
    file(APPEND ${f} "    newArchivist = std::make_shared<${module_name}Archivist>(popFileColumns, _maxFormula, PT, groupPrefix);\n")
    file(APPEND ${f} "    found = true;\n")
    file(APPEND ${f} "    }\n")
  endforeach()
  file(APPEND ${f} "  if (!found){\n")
  file(APPEND ${f} "    std::cout << \"  ERROR! could not find ARCHIVIST-outputMethod \\\"\" << archivistType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${f} "    exit(1);\n")
  file(APPEND ${f} "    }\n")
  file(APPEND ${f} "  return newArchivist;\n")
  file(APPEND ${f} "}\n")

  # write brain factory
  file(APPEND ${f} "\n")
  file(APPEND ${f} "//create a template brain\n")
  file(APPEND ${f} "std::shared_ptr<AbstractBrain> makeTemplateBrain(int inputs, int outputs, std::shared_ptr<ParametersTable> PT){\n")
  file(APPEND ${f} "  std::shared_ptr<AbstractBrain> newBrain;\n")
  file(APPEND ${f} "  bool found = false;\n")
  file(APPEND ${f} "  std::string brainType = AbstractBrain::brainTypeStrPL->get(PT);\n")
  foreach(module_name ${list_brains})
    file(APPEND ${f} "  if (brainType == \"${module_name}\") {\n")
    file(APPEND ${f} "    newBrain = ${module_name}Brain_brainFactory(inputs, outputs, PT);\n")
    file(APPEND ${f} "    found = true;\n")
    file(APPEND ${f} "    }\n")
  endforeach()
  file(APPEND ${f} "  if (!found){\n")
  file(APPEND ${f} "    std::cout << \"  ERROR! could not find BRAIN-brainType \\\"\" << brainType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${f} "    exit(1);\n")
  file(APPEND ${f} "    }\n")
  file(APPEND ${f} "  return newBrain;\n")
  file(APPEND ${f} "}\n")

  # write genome factory
  file(APPEND ${f} "\n")
  file(APPEND ${f} "//create a template genome\n")
  file(APPEND ${f} "std::shared_ptr<AbstractGenome> makeTemplateGenome(std::shared_ptr<ParametersTable> PT){\n")
  file(APPEND ${f} "  std::shared_ptr<AbstractGenome> newGenome;\n")
  file(APPEND ${f} "  bool found = false;\n")
  file(APPEND ${f} "  std::string genomeType = AbstractGenome::genomeTypeStrPL->get(PT);\n")
  foreach(module_name ${list_genomes})
    file(APPEND ${f} "if (genomeType == \"${module_name}\") {\n")
    file(APPEND ${f} "  newGenome = ${module_name}Genome_genomeFactory(PT);\n")
    file(APPEND ${f} "  found = true;\n")
    file(APPEND ${f} "  }\n")
  endforeach()
  file(APPEND ${f} "if (found == false){\n")
  file(APPEND ${f} "  std::cout << \"  ERROR! could not find GENOME-genomeType \\\"\" << genomeType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${f} "  exit(1);\n")
  file(APPEND ${f} "  }\n")
  file(APPEND ${f} "return newGenome;\n")
  file(APPEND ${f} "}\n")

  # write optimizer factory
  file(APPEND ${f} "\n")
  file(APPEND ${f} "//create an optimizer\n")
  file(APPEND ${f} "std::shared_ptr<AbstractOptimizer> makeOptimizer(std::shared_ptr<ParametersTable> PT){\n")
  file(APPEND ${f} "  std::shared_ptr<AbstractOptimizer> newOptimizer;\n")
  file(APPEND ${f} "  bool found = false;\n")
  file(APPEND ${f} "  std::string optimizerType = AbstractOptimizer::Optimizer_MethodStrPL->get(PT);\n")
  foreach(module_name ${list_optimizers})
    file(APPEND ${f} "  if (optimizerType == \"${module_name}\") {\n")
    file(APPEND ${f} "    newOptimizer = std::make_shared<${module_name}Optimizer>(PT);\n")
    file(APPEND ${f} "    found = true;\n")
    file(APPEND ${f} "    }\n")
  endforeach()
  file(APPEND ${f} "  if (!found){\n")
  file(APPEND ${f} "    std::cout << \"  ERROR! could not find OPTIMIZER-optimizer \\\"\" << optimizerType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${f} "    exit(1);\n")
  file(APPEND ${f} "    }\n")
  file(APPEND ${f} "  return newOptimizer;\n")
  file(APPEND ${f} "}\n")

  # write world factory
  file(APPEND ${f} "\n")
  file(APPEND ${f} "//create a world\n")
  file(APPEND ${f} "std::shared_ptr<AbstractWorld> makeWorld(std::shared_ptr<ParametersTable> PT){\n")
  file(APPEND ${f} "  std::shared_ptr<AbstractWorld> newWorld;\n")
  file(APPEND ${f} "  bool found = false;\n")
  file(APPEND ${f} "  std::string worldType = AbstractWorld::worldTypePL->get(PT);\n")
  foreach(module_name ${list_worlds})
    file(APPEND ${f} "  if (worldType == \"${module_name}\") {\n")
    file(APPEND ${f} "    newWorld = std::make_shared<${module_name}World>(PT);\n")
    file(APPEND ${f} "    found = true;\n")
    file(APPEND ${f} "    }\n")
  endforeach()
  file(APPEND ${f} "  if (!found){\n")
  file(APPEND ${f} "    std::cout << \"  ERROR! could not find WORLD-worldType \\\"\" << worldType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${f} "    exit(1);\n")
  file(APPEND ${f} "    }\n")
  file(APPEND ${f} "  return newWorld;\n")
  file(APPEND ${f} "}\n")

  string(REPLACE ";" ", " options_archivists "${list_archivists}")
  string(REPLACE ";" ", " options_brains "${list_brains}")
  string(REPLACE ";" ", " options_genomes "${list_genomes}")
  string(REPLACE ";" ", " options_optimizers "${list_optimizers}")
  string(REPLACE ";" ", " options_worlds "${list_worlds}")

  list(FIND list_archivists "${default_archivist}" has_brain)
  if(has_archivist EQUAL "-1")
    list(GET list_archivists 0 default_archivist)
    set(default_archivist "${default_archivist}" CACHE STRING "" FORCE)
  endif()
  list(FIND list_brains "${default_brain}" has_brain)
  if(has_brain EQUAL "-1")
    list(GET list_brains 0 default_brain)
    set(default_brain "${default_brain}" CACHE STRING "" FORCE)
  endif()
  list(FIND list_genomes "${default_genome}" has_brain)
  if(has_brain EQUAL "-1")
    list(GET list_genomes 0 default_genome)
    set(default_genome "${default_genome}" CACHE STRING "" FORCE)
  endif()
  list(FIND list_optimizers "${default_optimizer}" has_brain)
  if(has_brain EQUAL "-1")
    list(GET list_optimizers 0 default_optimizer)
    set(default_optimizer "${default_optimizer}" CACHE STRING "" FORCE)
  endif()
  list(FIND list_worlds "${default_world}" has_brain)
  if(has_world EQUAL "-1")
    list(GET list_worlds 0 default_world)
    set(default_world "${default_world}" CACHE STRING "" FORCE)
  endif()

  # configure Defaults and Documentation
  file(APPEND ${f} "\n")
  file(APPEND ${f} "//configure Defaults and Documentation\n")
  file(APPEND ${f} "void configureDefaultsAndDocumentation(){\n")
  file(APPEND ${f} "  Parameters::root->setParameter(\"BRAIN-brainType\", (std::string)\"${default_brain}\");\n")
  file(APPEND ${f} "  Parameters::root->setDocumentation(\"BRAIN-brainType\", \"brain to be used, [${options_brains}]\");\n")
  file(APPEND ${f} "  Parameters::root->setParameter(\"GENOME-genomeType\", (std::string)\"${default_genome}\");\n")
  file(APPEND ${f} "  Parameters::root->setDocumentation(\"GENOME-genomeType\", \"genome to be used, [${options_genomes}]\");\n")
  file(APPEND ${f} "  Parameters::root->setParameter(\"ARCHIVIST-outputMethod\", (std::string)\"${default_archivist}\");\n")
  file(APPEND ${f} "  Parameters::root->setDocumentation(\"ARCHIVIST-outputMethod\", \"output method, [${options_archivists}]\");\n")
  file(APPEND ${f} "  Parameters::root->setParameter(\"OPTIMIZER-optimizer\", (std::string)\"${default_optimizer}\");\n")
  file(APPEND ${f} "  Parameters::root->setDocumentation(\"OPTIMIZER-optimizer\", \"optimizer to be used, [${options_optimizers}]\");\n")
  file(APPEND ${f} "  Parameters::root->setParameter(\"WORLD-worldType\", (std::string)\"${default_world}\");\n")
  file(APPEND ${f} "  Parameters::root->setDocumentation(\"WORLD-worldType\",\"world to be used, [${options_worlds}]\");\n")
  file(APPEND ${f} "}\n")
  file(APPEND ${f} "#endif /* __AutoBuild__Modules__ */\n")
endfunction()

# main already included as entrypoint
target_sources(${EXE} PRIVATE Global.cpp)

include(Analyze/CMakeLists.txt)
include(Archivist/CMakeLists.txt)
include(Brain/CMakeLists.txt)
include(Genome/CMakeLists.txt)
include(Group/CMakeLists.txt)
include(Optimizer/CMakeLists.txt)
include(Organism/CMakeLists.txt)
include(Utilities/CMakeLists.txt)
include(World/CMakeLists.txt)

include_directories(.)

list(LENGTH list_archivists num_archivists)
list(LENGTH list_brains num_brains)
list(LENGTH list_genomes num_genomes)
list(LENGTH list_optimizers num_optimizers)
list(LENGTH list_worlds num_worlds)

set(default_archivist "" CACHE STRING "")
if( num_archivists GREATER 0 )
  if("${default_brain}" STREQUAL "")
    list(GET list_archivists 0 default_archivist)
    set(default_archivist "${default_archivist}" CACHE STRING "" FORCE)
  endif()
endif()
set(default_brain "" CACHE STRING "")
if( num_brains GREATER 0 )
  if("${default_brain}" STREQUAL "")
    list(GET list_brains 0 default_brain)
    set(default_brain "${default_brain}" CACHE STRING "" FORCE)
  endif()
endif()
set(default_genome "" CACHE STRING "")
if( num_genomes GREATER 0 )
  if("${default_genome}" STREQUAL "")
    list(GET list_genomes 0 default_genome)
    set(default_genome "${default_genome}" CACHE STRING "" FORCE)
  endif()
endif()
set(default_optimizer "" CACHE STRING "")
if( num_optimizers GREATER 0 )
  if("${default_optimizer}" STREQUAL "")
    list(GET list_optimizers 0 default_optimizer)
    set(default_optimizer "${default_optimizer}" CACHE STRING "" FORCE)
  endif()
endif()
set(default_world "" CACHE STRING "")
if( num_worlds GREATER 0 )
  if("${default_world}" STREQUAL "")
    list(GET list_worlds 0 default_world)
    set(default_world "${default_world}" CACHE STRING "" FORCE)
  endif()
endif()

# if we have sufficient information, then continue and build modules.h
if( (num_brains GREATER 0) AND (num_genomes GREATER 0) AND (num_worlds GREATER 0) )
  write_modules_h()
  #else()
  #  message(FATAL_ERROR "You must enable at least 1 of each modules: Brain, Genome, World")
endif()

