% WORLD
  debug = 0                                  #(bool) run world in debug mode (if available)
  worldType = PathFollow                     #(string) world to be used, [PathFollow, TPM_GENERATOR, Test]

% WORLD_PATHFOLLOW
  addFlippedMaps = 1                         #(bool) if addFlippedMaps, than a copy of each loaded map flipped horizontaly will be added to the maps list
  clearVisted = 0                            #(bool) if clearVisted is true, then world markers will be erased when a location is occupied and visting this location
                                             #  again will incure the emptySpace cost.
                                             #  note that map values > 1, i.e. turn signals and end of map signal are set to 1 (forward signal) when visted to provide
                                             #  time to take a turn action.
  emptySpaceCost = 0.25                      #(double) score lost anytime agent is on an empty location (including non-empty locations that become empty)
  evaluationsPerGeneration = 1               #(int) how many times should each organism be tested in each generation?
  extraSteps = 50                            #(int) how many many steps, beyond those needed to perfectly solve the map, does the agent get to solve each map?
  inputMode = binary                         #(string) how are inputs delived from world to organism?
                                             #  single: 1 input : -1 (off), 0(forward), or [1, signValueMax](turn symbol)
                                             #  mixed:  4 inputs: offPathBit,onPathBit,(0(not turn), or [1,signValueMax](turn symbol))
                                             #  binary: 3+ inputs: offPathBit,onPathBit,onTurnBit, bits for turn symbol(0 if not turn)
  mapNames = ../code/World/PathFollowWorld/Path1.txt,../code/World/PathFollowWorld/Path2.txt, ../code/World/PathFollowWorld/Path3.txt,../code/World/PathFollowWorld/Path4.txt #(string) list of text files with paths. in path files, X = start position,
                                             #  0 = empty, 1 = forward path, 2 = turn right, 3 = turn right, 4 = end of path
  swapSymbolsAfter = 1.0                     #(double) if swapSignals < 1.0, than the turn symbols will be swapped after (minimum number of steps * swapSignalsAfter)
  turnSymbolsCount = 2                       #(int) number of symbols that will be used when generating turn symbols.
                                             #  if inputMode is binary it is best if this value is a power of 2
  useRandomTurnSymbols = 1                   #(bool) if true, random symbols will be determined per map (and per eval) for left and right.
                                             #  symbols will be the same for all agents in a generation.
                                             #  if false, symbolValueMax is ignored and 1 and 2  (or 01 and 10) are always used

% WORLD_TEST
  evaluationsPerGeneration = 1               #(int) Number of times to test each Genome per generation (useful with non-deterministic brains)
  mode = 0                                   #(int) 0 = bit outputs before adding, 1 = add outputs
  numberOfOutputs = 10                       #(int) number of outputs in this world

% WORLD_TEST_NAMES
  brainNameSpace = root::                    #(string) namespace for parameters used to define brain
  groupNameSpace = root::                    #(string) namespace of group to be evaluated

% WORLD_TPM_GENERATOR
  beforeStatesEndian = little                #(string) little vs. big, is little before states will have least signifigent bit on left (ie. 000,100,010,110,001,101,...,111)
  discretizeRuleHidden = BIT                 #(string) rule to use when generating outputs to discretizing hidden
  discretizeRuleInput = BIT                  #(string) rule to use when generating outputs to discretizing inputs
                                             #  options are INT, BIT, TRIT, NEAREST_INT, NEAREST_BIT, NEAREST_TRIT, MEDIAN, UNIQUE
                                             #  see  github.com/Hintzelab/MABE/wiki/TimeSeries  for explinations under remapToIntTimeSeries
  discretizeRuleOutput = BIT                 #(string) rule to use when generating outputs to discretizing outputs
  missingSymbol = -1                         #(int) value to be used when making filler samples (i.e. if outputMode is packed)
  numberOfHidden = 4                        #(int) number of hidden in each organism?
  numberOfSamples = 1                        #(int) how many times should each state be tested?
  outputMode = divided                           #(string) how should data be saved?
                                             #    raw: output full time series for input, output, and hidden. This will result in 2 hidden entires for each input/output
                                             #  for the before and after hidden states
                                             #    divided: output full time series for input, output, hidden before, and hidden after (if recurrentOutput output
                                             #  is divided into before and after)
                                             #    joined: output two time series, one with input+hidden and the other with output+hidden (if recurrentOutput output
                                             #  will appear with input+hidden)
                                             #    packed: output two time series, one with input+emptyOutput+hidden and the other with emptyInput+output+hidden (if
                                             #  recurrentOutput output will appear with input+hidden)
  saveBrainStructure = 0                     #(bool) if true, save a plot of brain structure
  saveS2S = 0                                #(bool) if true, save state to state plots
  symbolsListHidden = 0,1                    #(string) list of symbols to use when generating hidden patterns to be fed to brain
  symbolsListInput = 0,1                     #(string) list of symbols to use when generating input patterns to be fed to brain
  symbolsListOutput = 0,1                    #(string) list of symbols to use when generating output patterns to be fed to brain
  worldName = PathFollow                      #(string) name of the world the agent was evolved on

