import os
import subprocess
import glob
import pandas as pd
from random import random



'''
This part loads population loader files from the MQ experiment and then produces a CSV file with results experiments, sorted from highest scoring to lowest scoring. Then, changes the processing visualizer script to visualize the best (or one of the best) result.
'''

'''
REQUIREMENTS:
Agents must have been generated by using MQ and this script must be in the same folder with the experiment folders from MQ ( the folders that start with C0,C1 etc.)

The user should specify the settings files and the work directories.

There must be a population loader file in the work directory. (This is used for visualization purposes).

Population loader file has only one line which says:

MASTER = greatest 1 by ID from { 'LOD_organisms.csv' }

If visualization is needed:
Processing_Visualizer folder should be copied to the work folder.

If processing is already an environment variable -i.e. can be reached from bash using "processing" command- one should be able to change the last line to 

os.system("processing Best_Agent_Visualizer/Best_Agent_Visualizer.pyde")


'''
#You don't need to touch this as long as the output of MQ is in the same folder with the script, if not, change it to where the output is.
#(Output folders are named like "C0_VarName_Var")
files = glob.glob('*C*/**/LOD_organisms.csv')


#This is the work directory, change it to fit your own's.
work_dir = "/Users/larissa_alb/pydev/Animats/MABE/work/"

#This is where the all output data goes in,you don't need to create a new directory, the script does it for you.
output_dir = work_dir + "MassVisualizationOutputs/"

#These are the settings files, you probably need to change the names
global_settings = work_dir+"settings.cfg "
organism_settings = work_dir+"settings_organism.cfg "
world_settings = work_dir+"settings_world.cfg "
settings = " -f " + global_settings + organism_settings + world_settings
population_loader = work_dir + "population_loader.plf"




#creates the output directory
os.system("mkdir MassVisualizationOutputs")


'''
This part goes over every file and creates a file name for the organism, the file name is used for storing the data of the organism in the output folder, 
then runs MABE for visualization. The command for visualization can be changed to reflect the needs of the user. 
'''
#YOU MAY NEED TO CHANGE THE WORLD_PATHFOLLOW-mapNames part of the commands
for file in files:
	#I copy LOD_organisms.csv file of the given agent to the work directy during the loop, because I couldn't figure a way out to change population loader file,
	#so this was the easier solution. When this script is run, the residue "LOD_organisms.csv" in your work directory is quite possibly the last file this script processed.
	copy_LOD_organisms_to_work = "cp "+work_dir+file + " " + work_dir+"LOD_organisms.csv"
	os.system(copy_LOD_organisms_to_work)

	file_name = file.split("/")
	file_name = file_name[0].split(".")[0]+file_name[1]

	visualize_path1_command  = "mabe -p GLOBAL-initPop " + population_loader +" GLOBAL-mode visualize BRAIN_MARKOV_ADVANCED-recordIOMap 1 WORLD_PATHFOLLOW-mapNames "+work_dir+"path1.txt" 

	visualize_all_paths_command  = "mabe -p GLOBAL-initPop "+ population_loader +" GLOBAL-mode visualize BRAIN_MARKOV_ADVANCED-recordIOMap 1"

	
	
	
	#for checking if the given condition has used "path1" only or it used all paths (MM = Many Maps conditions in the MQ conditions file),
	#this may be disabled to reflect the needs of the user,
	#but if no "path1.txt" is used as a single condition, no one will notice.
	
	if file.find("path1.txt") != -1:
		#print(file[0:-22])
		command = work_dir + visualize_path1_command + settings	
	else:
		command = work_dir + visualize_all_paths_command + settings
	print(command)
	print(os.getcwd())
	os.system("mv pathVisualization.txt MassVisualizationOutputs/"+file_name+"pathVisualization.txt")
	os.system("mv visualizationData_101.txt MassVisualizationOutputs/"+file_name+"visualizationData_101.txt")
	os.system(command)

	#import pdb; pdb.set_trace() 	
	
	
#This collects the data files' paths from the output directory. Data files have information about score,completion,etc.
data_files = glob.glob(output_dir+"**Data_101.txt")

#This part creates a new csv called "merged_data.csv" so that we can merge all the data files into one csv. And below the first line merges the data files.
#It also collects the visualization files ("vis files"), so that we can have Processing Visualizer visualize the best agent.
#The merged_data.csv is presented from best to worst, it is sorted.
output = open("merged_data.csv","w")
output.write("score,completion,reachGoal,firstTurn,sign2,sign3,data_file\n")
output.close()
output = open("merged_data.csv", "a")
vis_files = []
for data_file in data_files:
	f = open(data_file,"r")
	lines = f.read()
	data_line = lines.split("\n")[1] + "," + data_file
	print(data_line)
	output.write(data_line+"\n")
	f.close
	
	vis_files.append(data_file.replace("visualizationData_101","pathVisualization"))
output.close()	


merged_data = pd.read_csv("merged_data.csv")
merged_data['vis_file'] = vis_files
merged_data = merged_data.sort_values(by=['score'],ascending = False)
merged_data.to_csv("merged_data.csv")




#UNCOMMENT IF YOU WANT TO VISUALIZE

#This part prepares files for visualization and starts processing to do the visualization.

'''
merged_data = pd.read_csv("merged_data.csv")
file_to_best_agent = merged_data['vis_file'][0]
the_new_path_for_vis = "fileName = '" + file_to_best_agent+ "'"
processing_visualizer_address = "/home/vimrek/MABE_withTPM/work/Processing_Visualizer/Processing_Visualizer.pyde"


os.system("cp Processing_Visualizer/Processing_Visualizer.pyde Best_Agent_Visualizer/Best_Agent_Visualizer.pyde")



with open('Processing_Visualizer/Processing_Visualizer.pyde') as bestin, open('Best_Agent_Visualizer/Best_Agent_Visualizer.pyde', 'w') as bestout:
    for i, item in enumerate(bestin, 1):
        if i == 9: 
            item = the_new_path_for_vis 
        bestout.write(item)


os.system("processing-3.5.4/processing Best_Agent_Visualizer/Best_Agent_Visualizer.pyde")
'''



